<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jhvaras]]></title>
  <link href="http://varas.github.io/atom.xml" rel="self"/>
  <link href="http://varas.github.io/"/>
  <updated>2014-06-20T19:49:10+02:00</updated>
  <id>http://varas.github.io/</id>
  <author>
    <name><![CDATA[jhvaras]]></name>
    <email><![CDATA[jhvaras@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automate your Wordpress farm backups &amp; updates]]></title>
    <link href="http://varas.github.io/blog/automate-your-wordpress-farm-backups-and-updates/"/>
    <updated>2014-06-19T18:40:00+02:00</updated>
    <id>http://varas.github.io/blog/automate-your-wordpress-farm-backups-and-updates</id>
    <content type="html"><![CDATA[<p>This maybe usefull if you are responsible of a high number of Wordpress sites.</p>

<h2>Concept</h2>

<p>The target here is to <strong>backup</strong> &amp; <strong>update</strong> (core, db and plugins) a Wordpress farm, i mean, a bunch of different Wps over several servers.</p>

<!-- more -->


<h2>Tools</h2>

<p>In case your servers run PHP v5.3+ you may know <a href="http://www.wp-cli.org">wp-cli</a>, if not, go try! <strong>wp-cli</strong> allows you to run different Wp tasks on command-line, so great point to automate.</p>

<p>My tool of choice to manage servers is <a href="http://www.ansible.com">Ansible</a>, an infrastructure automation tool, simple and to the point.</p>

<h2>Approach</h2>

<p>We want to set the servers and paths, and path to the backups. We want to have one in case any update breaks something. Also we may need a name for the backup files.</p>

<blockquote><p>So we need to associate a <strong>name</strong> and a <strong>path</strong> to each Wp <strong>host</strong>.</p></blockquote>

<h3>Structured data per host on Ansible</h3>

<p>In order to accomplish such a <strong>structured data per host</strong> on Ansible I didn&rsquo;t find any proper way, as the inventory file doesn&rsquo;t to support this. I opened a <a href="https://github.com/ansible/ansible/issues/7800">Feature request</a> for that.</p>

<p>After trying several <em>dict</em> approaches, my solution, was to associate the host on a <em>list</em> (I couldn&rsquo;t make a dict to work), through a var-name relation such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># inventory
</span><span class='line'>111.111.111.111 server=hostingA
</span><span class='line'>
</span><span class='line'># vars
</span><span class='line'>hostingA
</span><span class='line'>- [ 
</span><span class='line'>    domain1.tld ,
</span><span class='line'>    /var/www/vhosts/domain1.tld/httpdocs/blog 
</span><span class='line'>  ]
</span><span class='line'>- [ ...</span></code></pre></td></tr></table></div></figure>


<p>You can test this with the <em>debug</em> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>debug: host={{ item }} msg="host {{ inventory_hostname }} - var_server {{ server }} - var_name {{ item[0] }}"
</span><span class='line'>  with_nested: server</span></code></pre></td></tr></table></div></figure>


<h2>Tasks</h2>

<p>Now the data per host is set and we can target as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shell: wp db export {{ backup_path }}/{{ item[0] }}.sql
</span><span class='line'>    chdir={{ item[1] }}
</span><span class='line'>    with_nested: server</span></code></pre></td></tr></table></div></figure>


<p>This lacks a nice informative timestamp.</p>

<h3>Timestamps on Ansible</h3>

<p>Again Ansible doesn&rsquo;t provide a standarized way of timestamp. There is another <a href="https://github.com/ansible/ansible/issues/2454">Feature Request</a>, closed, but it is recently taking relevance.</p>

<p>So I managed to get it from a register:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shell: date '+%Y_%m_%d_%H%M'
</span><span class='line'>    register: timestamp</span></code></pre></td></tr></table></div></figure>


<p>Now we can make a proper log name such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shell: wp db export {{ backup_path }}/{{ item[0] }}.{{ timestamp.stdout }}.sql</span></code></pre></td></tr></table></div></figure>


<p>I made a <a href="https://github.com/varas/ansible_wp_cli/blob/master/tasks/main.yml">playbook</a> to install <strong>wp-cli</strong>, <strong>backup</strong> Wp files &amp; db, and <strong>update</strong> Wp core, db &amp; plugins.</p>

<h2>Results</h2>

<p>You can take a look to the final role available at <a href="https://github.com/varas/ansible_wp_cli">Github</a>.</p>

<p>First make a small task manually, then automate it. Second add complex manually, then:</p>

<p><a href="http://varas.github.io/images/automate_all_the_things.jpg">Automate all the things!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Productive Environment for PHP Teams - II]]></title>
    <link href="http://varas.github.io/blog/productive-environment-for-php-teams-ii/"/>
    <updated>2013-07-25T13:53:00+02:00</updated>
    <id>http://varas.github.io/blog/productive-environment-for-php-teams-ii</id>
    <content type="html"><![CDATA[<p>Previous post shown the reasons to host a local Composer repository. This will show the code to accomplish that point.</p>

<p>Let&rsquo;s get dirty!</p>

<!-- more -->


<h1>Setting up a local Composer respository</h1>

<h2>Install Composer</h2>

<p>If you didn&rsquo;t previously:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -sS https://getcomposer.org/installer | php
</span><span class='line'>mv composer.phar /usr/local/bin/composer
</span></code></pre></td></tr></table></div></figure>


<h2>Install Satis</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>composer create-project composer/satis --stability<span class="o">=</span>dev
</span><span class='line'><span class="nb">cd </span>satis
</span></code></pre></td></tr></table></div></figure>


<p>At this point you can generate a <code>package.json</code> through Satis in order to use a local repository.
To generate a <strong>Composer-repo</strong> from a <strong>Git-repo</strong> the only requirement is to have a <em>valid <code>composer.json</code> on the root folder at master branch</em>.</p>

<h2>Add a composer.json file to your Git repo</h2>

<p>Composer helps you to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>composer init
</span></code></pre></td></tr></table></div></figure>


<h2>Generate a Composer-repo from your Git-repo</h2>

<p>All you need is to edit a <code>satis.json</code> file</p>

<figure class='code'><figcaption><span>satis.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;jhvaras/example&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;homepage&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.local&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Example description here&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;repositories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;vcs&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;/path/to/the/git/repository&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;require-all&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And generate the Composer repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/satis build satis.json /path/to/the/composer/repository
</span></code></pre></td></tr></table></div></figure>


<p>And you are done!!!</p>

<h1>Install from your Composer repository</h1>

<p>Edit your <code>composer.json</code>, add your <em>require package name</em> and the local repo, which you can publish through <em>http</em> in order to be accesed locally:</p>

<figure class='code'><figcaption><span>your-project/composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span><span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;jhvaras/example&quot;</span><span class="p">:</span><span class="s2">&quot;dev-master&quot;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;repositories&quot;</span><span class="err">:</span> <span class="p">[</span> <span class="p">{</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span><span class="s2">&quot;composer&quot;</span><span class="p">,</span> <span class="nt">&quot;url&quot;</span><span class="p">:</span><span class="s2">&quot;http://your_composer_repo.local&quot;</span> <span class="p">}</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can avoid coping the repositories line by adding the repository to the default reposiitories:</p>

<figure class='code'><figcaption><span>~/.composer/config.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;repositories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;type&quot;</span><span class="p">:</span><span class="s2">&quot;composer&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;url&quot;</span><span class="p">:</span><span class="s2">&quot;http://git.local2&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Improving the environment</h1>

<p>This is quite complex just to get a private Composer repo, so next post in this serie will cover how to automate this tasks, and get a local GitHub working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Productive Environment for PHP Teams - I]]></title>
    <link href="http://varas.github.io/blog/productive-environment-for-php-teams-i/"/>
    <updated>2013-07-08T22:20:00+02:00</updated>
    <id>http://varas.github.io/blog/productive-environment-for-php-teams-i</id>
    <content type="html"><![CDATA[<p>As PHP developers we are usually getting things done to be productive. Getting things done fast is the main reason for chosing PHP by many software companies. This fact usually makes PHP devs to get out low quality code.</p>

<p>How can we improve our code quality while keeping the productivity?</p>

<!-- more -->


<p><em>Code-Reuse</em></p>

<p>Since its 5.3 version PHP has become a more popular due to a bunch of rich features. Namespaces landed on PHP and one of the bests improvements since that has been <a href="http://getcomposer.org">Composer</a>.</p>

<p>Most of us (PHP devs) use Composer to get libraries packed on our projects avoiding dependency troubleshooting. But why not using it locally?</p>

<p>We can get a reuse environment on your team/office avoiding duplicated code and becoming people more productive. Assuming people will code components many other benefits will apply:</p>

<ul>
<li>Members get knowledge once they grab a component</li>
<li>We get decoupled and reusable functionalities</li>
<li>Testing might be applied on functionalities</li>
<li>Code may be easily refactored</li>
<li>Bug tracking/solving is eased</li>
<li>Fixes may be applied to all projects</li>
<li>Versioning of components can be applied</li>
<li>Good practices arise</li>
</ul>


<p>If you don’t mind how to get this work, next post will cover how to create and use local packages using <a href="https://github.com/composer/satis">Satis</a>  to generate a local composer reposotory throught local <em>Git</em> repositories.</p>

<p>You can even improve the result adding a private GitHub flavored interface <a href="http://gitlist.org/">GitList</a></p>
]]></content>
  </entry>
  
</feed>
